// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     cost.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Cost struct {
	Amount float64 `json:"amount"`

	Discount_amount float64 `json:"discount_amount"`

	End_date string `json:"end_date"`

	Granularity string `json:"granularity"`

	Line_type string `json:"line_type"`

	Network_access_type string `json:"network_access_type"`

	Original_amount float64 `json:"original_amount"`

	Price float64 `json:"price"`

	Product string `json:"product"`

	Quantity float64 `json:"quantity"`

	Start_date string `json:"start_date"`

	Unit string `json:"unit"`

	Resource Resource `json:"resource"`
}

const CostAvroCRC64Fingerprint = "&X\x13\xb7\x98F\xe4\xc8"

func NewCost() Cost {
	r := Cost{}
	r.Resource = NewResource()

	return r
}

func DeserializeCost(r io.Reader) (Cost, error) {
	t := NewCost()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCostFromSchema(r io.Reader, schema string) (Cost, error) {
	t := NewCost()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCost(r Cost, w io.Writer) error {
	var err error
	err = vm.WriteDouble(r.Amount, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Discount_amount, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.End_date, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Granularity, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Line_type, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Network_access_type, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Original_amount, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Price, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Product, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Quantity, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Start_date, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Unit, w)
	if err != nil {
		return err
	}
	err = writeResource(r.Resource, w)
	if err != nil {
		return err
	}
	return err
}

func (r Cost) Serialize(w io.Writer) error {
	return writeCost(r, w)
}

func (r Cost) Schema() string {
	return "{\"fields\":[{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"discount_amount\",\"type\":\"double\"},{\"name\":\"end_date\",\"type\":\"string\"},{\"name\":\"granularity\",\"type\":\"string\"},{\"name\":\"line_type\",\"type\":\"string\"},{\"name\":\"network_access_type\",\"type\":\"string\"},{\"name\":\"original_amount\",\"type\":\"double\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"product\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"double\"},{\"name\":\"start_date\",\"type\":\"string\"},{\"name\":\"unit\",\"type\":\"string\"},{\"name\":\"resource\",\"type\":{\"fields\":[{\"name\":\"display_name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"environment\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"environment\",\"type\":\"record\"}}],\"name\":\"resource\",\"type\":\"record\"}}],\"name\":\"Cost\",\"type\":\"record\"}"
}

func (r Cost) SchemaName() string {
	return "Cost"
}

func (_ Cost) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Cost) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Cost) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Cost) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Cost) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Cost) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Cost) SetString(v string)   { panic("Unsupported operation") }
func (_ Cost) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Cost) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Double{Target: &r.Amount}

		return w

	case 1:
		w := types.Double{Target: &r.Discount_amount}

		return w

	case 2:
		w := types.String{Target: &r.End_date}

		return w

	case 3:
		w := types.String{Target: &r.Granularity}

		return w

	case 4:
		w := types.String{Target: &r.Line_type}

		return w

	case 5:
		w := types.String{Target: &r.Network_access_type}

		return w

	case 6:
		w := types.Double{Target: &r.Original_amount}

		return w

	case 7:
		w := types.Double{Target: &r.Price}

		return w

	case 8:
		w := types.String{Target: &r.Product}

		return w

	case 9:
		w := types.Double{Target: &r.Quantity}

		return w

	case 10:
		w := types.String{Target: &r.Start_date}

		return w

	case 11:
		w := types.String{Target: &r.Unit}

		return w

	case 12:
		r.Resource = NewResource()

		w := types.Record{Target: &r.Resource}

		return w

	}
	panic("Unknown field index")
}

func (r *Cost) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Cost) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Cost) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Cost) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Cost) HintSize(int)                     { panic("Unsupported operation") }
func (_ Cost) Finalize()                        {}

func (_ Cost) AvroCRC64Fingerprint() []byte {
	return []byte(CostAvroCRC64Fingerprint)
}

func (r Cost) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["amount"], err = json.Marshal(r.Amount)
	if err != nil {
		return nil, err
	}
	output["discount_amount"], err = json.Marshal(r.Discount_amount)
	if err != nil {
		return nil, err
	}
	output["end_date"], err = json.Marshal(r.End_date)
	if err != nil {
		return nil, err
	}
	output["granularity"], err = json.Marshal(r.Granularity)
	if err != nil {
		return nil, err
	}
	output["line_type"], err = json.Marshal(r.Line_type)
	if err != nil {
		return nil, err
	}
	output["network_access_type"], err = json.Marshal(r.Network_access_type)
	if err != nil {
		return nil, err
	}
	output["original_amount"], err = json.Marshal(r.Original_amount)
	if err != nil {
		return nil, err
	}
	output["price"], err = json.Marshal(r.Price)
	if err != nil {
		return nil, err
	}
	output["product"], err = json.Marshal(r.Product)
	if err != nil {
		return nil, err
	}
	output["quantity"], err = json.Marshal(r.Quantity)
	if err != nil {
		return nil, err
	}
	output["start_date"], err = json.Marshal(r.Start_date)
	if err != nil {
		return nil, err
	}
	output["unit"], err = json.Marshal(r.Unit)
	if err != nil {
		return nil, err
	}
	output["resource"], err = json.Marshal(r.Resource)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Cost) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Amount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for amount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["discount_amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Discount_amount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for discount_amount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["end_date"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.End_date); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for end_date")
	}
	val = func() json.RawMessage {
		if v, ok := fields["granularity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Granularity); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for granularity")
	}
	val = func() json.RawMessage {
		if v, ok := fields["line_type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Line_type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for line_type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["network_access_type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Network_access_type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for network_access_type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["original_amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Original_amount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for original_amount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["price"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Price); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for price")
	}
	val = func() json.RawMessage {
		if v, ok := fields["product"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Product); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for product")
	}
	val = func() json.RawMessage {
		if v, ok := fields["quantity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Quantity); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for quantity")
	}
	val = func() json.RawMessage {
		if v, ok := fields["start_date"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Start_date); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for start_date")
	}
	val = func() json.RawMessage {
		if v, ok := fields["unit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Unit); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for unit")
	}
	val = func() json.RawMessage {
		if v, ok := fields["resource"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Resource); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for resource")
	}
	return nil
}
